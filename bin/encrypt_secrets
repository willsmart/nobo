#!/bin/bash

# this file encrypts secrets so they can be committed to git
# the first layer of secret is held in the "secrets" dir (which is automatically joined with the app, like the app specific dir "App")
# this dir should hold secrets that are available to anyone who holds the original dir structure that made the ModelServerImage, or holds the ModelServer root login
# the second layer of secret is in secrets/secrets, which is only available to those holding the original base password, not to be committed in any way
# (secrets dir is encrypted using a salted hash on the base password)

DIR=`realpath "$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )/../.."`

secretsDir="secrets"
secretsFile="secrets.dat"
secretsSh="secrets.sh"

if [[ -f "$DIR/$secretsSh" ]]; then
  . "$DIR/secrets.sh"
fi

if [[ ! -d "$DIR/$secretsDir" ]]; then
  echo "No secrets dir to encrypt"
  exit 0
fi

if [[ "$TH_SECRETS_PASSWORD" == "" ]]; then
  echo "please set TH_SECRETS_PASSWORD to the password for $secretsFile or generate a $secretsSh file using nobo/bin/generate-app"
  exit 1
fi 

if [[ -d "$DIR/$secretsDir" ]]; then

  if [[ "$TH_DEEP_SECRETS_PASSWORD" == "" ]]; then
    echo "please set TH_DEEP_SECRETS_PASSWORD to the password for $secretsDir/$secretsFile or generate a $secretsSh file using nobo/bin/generate-app"
    exit 1
  fi 

  cd "$DIR/$secretsDir"
  echo "encrypting deep secrets"
  tar -cz -C "." "$secretsDir" | openssl enc -aes-256-cbc -pass pass:"$TH_DEEP_SECRETS_PASSWORD" -out "$secretsFile"
  if [[ $? != 0 ]]; then
    echo "failed to encrypt deep secrets"
    exit 1
  fi
fi

cd "$DIR"
tar -cz -v --exclude='./$secretsDir/$secretsDir' -C "." "$secretsDir" | openssl enc -aes-256-cbc -pass pass:"$TH_SECRETS_PASSWORD" -out "$secretsFile"
